package org.asal.jac.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;
import org.asal.jac.services.Album;
import org.asal.jac.services.Artiste;
import org.asal.jac.services.Chanson;
import org.asal.jac.services.Main;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


public class DbUtils {
	
	private static SessionFactory sFact;
	
	private final static String url="jdbc:hsqldb:hsql://localhost/db";
	private final static String createArtiste="CREATE TABLE ARTISTE ("+"ID INTEGER GENERATED BY DEFAULT AS IDENTITY,"+ "CODEARTISTE INTEGER NOT NULL,"+"NOM CHAR(25) NOT NULL,"+"PRIMARY KEY(ID)"+")";
	private final static String createAlbum="CREATE TABLE ALBUM ("+"ID INTEGER GENERATED BY DEFAULT AS IDENTITY,"+ "CODEALBUM INTEGER NOT NULL,"+"NOM CHAR(25) NOT NULL,"+"ARTISTEID INTEGER ,"+"PRIMARY KEY(ID)"+")";
	private final static String createChanson="CREATE TABLE CHANSON ("+"ID INTEGER GENERATED BY DEFAULT AS IDENTITY,"+"CODECHANSON INTEGER NOT NULL,"+"NOM CHAR(25) NOT NULL,"+"DUREE INTEGER NOT NULL,"+"ALBUMID INTEGER,"+"PRIMARY KEY(ID)"+")";
	
	private static Logger logger=Logger.getLogger(DbUtils.class);
	public DbUtils() {
	}
	
	public static void loadDriver() throws ClassNotFoundException{
		Class.forName("org.hsqldb.jdbcDriver");
		logger.info("Driver loaded");
	}
	
	public static Connection newConn() throws SQLException{
		Connection conn=DriverManager.getConnection(url,"SA","");
		return conn;
	}
	
	//script to populate the database in the first place
	public static void populate(){
		//loading driver
		logger.info("Database initialising");
		//connecting to database
		Connection conn=null;
		try {
			loadDriver();
			conn=newConn();
			//conn.setAutoCommit(false);
			Statement st=conn.createStatement();
			//batch creating the required tables
			st.addBatch(createArtiste);
			st.addBatch(createAlbum);
			st.addBatch(createChanson);
			logger.info("Batch created");
			conn.commit();
			st.executeBatch();
			logger.info("Batch executed");
			st.close();		
			conn.close();
			
		}catch (ClassNotFoundException e) {

			logger.warn("Driver not found");
			e.printStackTrace();
		} 
		catch (SQLException e) {

			logger.warn("Database not found");
			e.printStackTrace();
		}
		
		
		
		
	}
	
	
	@SuppressWarnings("deprecation")
	//write info on db with argument the directory where to find files
	public static void writeToDb(String directory){
		sFact=new Configuration().configure().buildSessionFactory();
		new Configuration().configure().setProperty("connection.url",Main.defaultdb);
		Session session=sFact.openSession();
		session.beginTransaction();
		logger.info("Commencing transfer of data to database");
		HashMap<Artiste, HashMap<Album, ArrayList<Chanson>>> toWrite = FileParser.extractAlbumWithArtiste(directory);
		if (toWrite!=null){
			Artiste artisteToSave=new Artiste();
			for(Map.Entry<Artiste, HashMap<Album, ArrayList<Chanson>>> mapArtisteAlbumChanson :toWrite.entrySet()){
				HashMap<Album, ArrayList<Chanson>> albumChansonHash=mapArtisteAlbumChanson.getValue();
				artisteToSave=mapArtisteAlbumChanson.getKey();
				session.save(artisteToSave);
				logger.info(artisteToSave.getNom()+" saved");
				Chanson chansonToSave=new Chanson();
				Album albumToSave=new Album();
				if (albumChansonHash!=null){
					for(Map.Entry<Album,ArrayList<Chanson>> mapAlbumChanson:albumChansonHash.entrySet()){
						//chansonToSave=mapAlbumChanson.getValue();
						albumToSave=mapAlbumChanson.getKey();
						if(mapAlbumChanson!=null){
							for(Chanson c:mapAlbumChanson.getValue()){
								chansonToSave=c;
								albumToSave.addChanson(c);
								session.save(chansonToSave);
								logger.info(chansonToSave.getNom()+" saved");
							}
						}
						artisteToSave.addAlbum(mapAlbumChanson.getKey());
						session.save(albumToSave);
						logger.info(albumToSave.getNom()+" saved");
					}
					//session.save(albumToSave);
				}
			}
		}
		session.getTransaction().commit();
		logger.info("Transfer done");
		session.close();
		sFact.close();		
		
	}

}
